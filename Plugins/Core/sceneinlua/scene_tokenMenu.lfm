<?xml version="1.0" encoding="UTF-8"?>
<popupForm name="frmTokenMenu" width="235" height="120" title="Menu do Token" drawContainer="false" movable="false"> 
	<import file="sceneTags.xml"/>

	<script>
		require("rrpgScene_Undo.dlua");
		require("scene_genericItemMenu.dlua");
		local currentMenuLayout = nil;
		local theSelection = nil;
		local theScene = nil;
		
		local function resizeForLayoutSize(aLayout)
			local h = aLayout.height;
			self.height = h + 5;
		end;
		
		local function onLayoutResized(aLayout)
			if aLayout == currentMenuLayout then
				resizeForLayoutSize(aLayout);
			end;
		end;
		
		local function alterarCamada(camada)
			if self.theSelection ~= nil then
				SC3UNDO_Capture(theScene,
					function()
						for k, v in pairs(self.theSelection) do
							v.layer = camada;
							v.selected = false;
						end;
					end);	
			end;
			
			self:close();
		end;
	</script>
	
	<flowLayout name="flaLayout" class="menu">
	</flowLayout>	
	
	<flowLayout name="flaCamadas" class="menu">
	</flowLayout>
	
	<flowLayout name="flaImageOptions" class="menu">
	</flowLayout>	

	<flowLayout name="flaConditionOptions" class="menu">
	</flowLayout>
	
	<script><![CDATA[
		local __Menuses = {self.flaLayout, self.flaCamadas, self.flaImageOptions, self.flaConditionOptions};
		require("rrpgScene_Clipboard.dlua");
		require("rrpgScene_Undo.dlua");
	
		for k, v in pairs(__Menuses) do
			local aLayout = v;
			aLayout.onAfterLayoutCalc = function() onLayoutResized(aLayout); end;				
		end;
			
		-- Menu Principal	
	
		local btnLayer = newMenuItem(lang("scene.tokenMenu.changeLayer"), self.flaLayout);
		local btnImageOptions = newMenuItem(lang("scene.menu.token.imgOptions"), self.flaLayout);
		local btnCondition = newMenuItem(lang("scene.tokenMenu.addCondition"), self.flaLayout);	
		local macEdit = newMultiActionMenuItem("", self.flaLayout, 5);
		local actCopy = macEdit:addActionButton("/icos/menuCopy.png", LANG("scene.menu.token.editCA.copy"));
		local actPaste = macEdit:addActionButton("/icos/menuPaste.png", LANG("scene.menu.token.editCA.paste"));
		local actUndo = macEdit:addActionButton("/icos/menuUndo.png", LANG("scene.menu.token.editCA.undo"));		
		local actInvisible = macEdit:addCheckBoxAction("/icos/menuInvisible.png", LANG("scene.visibilityChange.ToGMOnly"));				
		local actClearMovHist = macEdit:addActionButton("/icos/clearHistory.png", lang("scene.tokenMenu.clearHistMov"));				
		local actClearMemory = macEdit:addActionButton("/icos/clearMemory.png", lang("scene.tokenMenu.clearMemory"));				
							
		local macOrganizar = newMultiActionMenuItem("", self.flaLayout, 5);
		local actBringToFront = macOrganizar:addActionButton("/icos/bringToFront.png", LANG("scene.organization.bringToFront"));		
		local actSendToBack = macOrganizar:addActionButton("/icos/sendToBack.png", LANG("scene.organization.sendToBack"));
		
		actBringToFront.onClick = function()
									GENERICItem_BringToFront(theScene, self.theSelection);
									self:close();
								  end;
								  
		actSendToBack.onClick = function()
									GENERICItem_SendToBack(theScene, self.theSelection);
									self:close();
								  end;				

		local btnCast = newMenuItem(lang("scene.tokenMenu.cast"), self.flaLayout);
		local btnApagar = newMenuItem(lang("scene.remove.item"), self.flaLayout);
		local btnOpen = newMenuItem(lang("scene.tokenMenu.open"), self.flaLayout);
		local btnSave = newMenuItem(lang("scene.tokenMenu.save"), self.flaLayout);
		local btnProps = newMenuItem(lang("scene.tokenMenu.properties"), self.flaLayout);
		
		-- Menu Camadas
				
		local btnCamadaVoltar = newMenuItem(lang("scene.menu.backOption"), self.flaCamadas);
		local btnCamadaTokens, itmCamadaTokens = newMenuItem(lang("scene.layer.tokens.noprefix"), self.flaCamadas);
		local btnCamadaObjetos, itmCamadaObjetos = newMenuItem(lang("scene.layer.objects.noprefix"), self.flaCamadas);
		local btnCamadaBackground, itmCamadaBackground = newMenuItem(lang("scene.layer.background.noprefix"), self.flaCamadas);
		
		-- Menu de Opções de Imagem
		local btnImgOVoltar = newMenuItem(lang("scene.menu.backOption"), self.flaImageOptions);
		
		local macFlip = newMultiActionMenuItem(lang("scene.menu.token.imgFlipMA"), self.flaImageOptions, 4);
		local actImgOFlipH = macFlip:addCheckBoxAction("/icos/flipH.png", lang("scene.menu.token.imgFlipH"));
		local actImgOFlipV = macFlip:addCheckBoxAction("/icos/flipV.png", lang("scene.menu.token.imgFlipV"));		
		
		local macImgColors = newMultiActionMenuItem(lang("scene.menu.token.imgCoresMA"), self.flaImageOptions, 4);
		local actImgGrayscale = macImgColors:addCheckBoxAction("/icos/grayscale.png", lang("scene.menu.token.grayscale"));
		local actColorBlend = macImgColors:addCheckBoxAction("/icos/colorBlend.png", lang("scene.menu.token.colorBlend"));										
		
		local macFiltros = newMultiActionMenuItem(lang("scene.menu.token.imgFiltroMA"), self.flaImageOptions, 4);
		local actFiltroNone = macFiltros:addRadioButtonAction("/icos/none.png", lang("scene.menu.token.imgFiltroMA.none"));
		local actFiltroGlow = macFiltros:addRadioButtonAction("/icos/glow.png", lang("scene.menu.token.imgFiltroMA.glow"));												
		local actFiltroInnerGlow = macFiltros:addRadioButtonAction("/icos/innerGlow.png", lang("scene.menu.token.imgFiltroMA.innerGlow"));
		local actFiltroBlur = macFiltros:addRadioButtonAction("/icos/blur.png", lang("scene.menu.token.imgFiltroMA.blur"));		
		
		local macImgFrame = newMultiActionMenuItem(lang("scene.menu.token.imgFrameMA"), self.flaImageOptions, 4);
		local actFrameNone = macImgFrame:addRadioButtonAction("/icos/none.png", lang("scene.menu.token.imgFrameMA.none"));
		local actFrameBoton = macImgFrame:addRadioButtonAction("/icos/botonFrame.png", lang("scene.menu.token.imgFrameMA.boton"));														
		
		-- Menu Condições

		local numConditions = 65;
		local btnConditionVoltar = newMenuItem(lang("scene.menu.backOption"), self.flaConditionOptions);
		local macConditions = newMultiActionMenuItem("", self.flaConditionOptions, 5);
		local actConditions = {};
		for i=1, numConditions, 1 do
			actConditions[i] = macConditions:addCheckBoxAction("/icos/conditions/"..i..".png", lang("scene.menu.conditions.c"..i));
		end;
		local conditionsSlots = {0, 0, 0, 0, 0};
		local slotX = {0, 0.6, 0, 0.6};
		local slotY = {0, 0, 0.6, 0.6};

		btnLayer.onClick = function()
							  self:setActiveMenu(self.flaCamadas);
						   end;	
		
		btnCamadaVoltar.onClick = function()
							self:setActiveMenu(self.flaLayout);
						  end;	
						  
		btnImgOVoltar.onClick = btnCamadaVoltar.onClick;
		
		btnImageOptions.onClick = function()
									self:setActiveMenu(self.flaImageOptions);
							      end;	

		btnCondition.onClick = function()
							  		self:setActiveMenu(self.flaConditionOptions);
						  	   end;	

		btnConditionVoltar.onClick = btnCamadaVoltar.onClick;		  	   
								  
		actCopy.onClick = function()
							SC3CLIPBOARD_Copy(self.theSelection);
							self:close();
						  end;	
						  
		actPaste.onClick = function()
							SC3CLIPBOARD_Paste(theScene);
							self:close();
						  end;		
							
		actUndo.onClick = function()
							SC3UNDO_Undo(theScene);
							self:close();
						  end;	

		actClearMovHist.onClick = function()
									SC3UNDO_Capture(theScene,
										function()
											for i = 1, #self.theSelection, 1 do
												local token = self.theSelection[i];
												local uData = token.userData;
												
												if uData ~= nil then
													local movHist = uData.movHist;
													
													if type(movHist) == "table" then
														NDB.clearNode(movHist);
													end;
												end;
											end;
										end);
									
									self:close();
								  end;
								  
		actClearMemory.onClick = function()
									SC3UNDO_Capture(theScene,
										function()
											for i = 1, #self.theSelection, 1 do
												local token = self.theSelection[i];
												token:clearMemoryAreas();
											end;
										end);
									
									self:close();
								  end;
								 										  
								 		
		
			local function createCallbackChangeImagePropValue(prop, value)
				local xScene = theScene;
				
				return function()
						local selecionados = theSelection;
						
						SC3UNDO_Capture(xScene, 
							function()
								for i = 1, #selecionados, 1 do
									local image = selecionados[i].image;

									if image ~= nil then				
										image[prop] = value;										
									end;
								end;	
							end);

						self:close();
					end;	
			end;
		
		actFiltroNone.onClick = function()
									local selecionados = theSelection;
									
									SC3UNDO_Capture(theScene,
										function()
											for i = 1, #selecionados, 1 do
												local image = selecionados[i].image;

												if image ~= nil then				
													selecionados[i].image.filterEx = "none";										
												end;
											end;	
										end);
			
									self:close();
								end;	

		actFiltroBlur.onClick = function()
									local selecionados = theSelection;
									
									SC3UNDO_Capture(theScene, 
										function()
											for i = 1, #selecionados, 1 do
												local image = selecionados[i].image;

												if image ~= nil then				
													selecionados[i].image.filterEx = "blur";										
												end;
											end;
										end);
			
									self:close();
								end;	
							
				local function createCallbackForSetFiltroComCor(filterExValue, titulo, defineTitulo)
					local xScene = theScene;
				
					return function()
								local frmSelCor = GUI.newForm("frmSelColor");
								local selecionados = self.theSelection;
								
								if selecionados == nil or #selecionados < 1 or selecionados[1].image == nil then
									return;
								end;
								
								frmSelCor.onRetorno = 
									function(cor, definido)
										SC3UNDO_Capture(xScene, 
											function()
												for i = 1, #selecionados, 1 do
													local image = selecionados[i].image;

													if image ~= nil then
														if definido then
															image.filterEx = filterExValue;
															image.filterExColor = cor;												
														end;
													end;
												end;	
											end);
									end;
									
								frmSelCor:prepareForShow(selecionados[1].image.filterExColor, 
														{useAlpha=false, 
														 title=titulo,
														 defineTitle=defineTitulo});									
								self:close();
								frmSelCor:show();
							end;
				end;						
		
		btnCamadaTokens.onClick = function() alterarCamada("tokens"); end;
		btnCamadaObjetos.onClick = function() alterarCamada("objects"); end;
		btnCamadaBackground.onClick = function() alterarCamada("background"); end;
		
		btnApagar.onClick = function()
								local sel = self.theSelection;								
								local msg;
								
								if #sel == 1 then
									msg = LANG("scene.ask.deleteOneItem");
								else
									msg = string.format(LANG("scene.ask.deleteMultiItem"), #sel);						
								end;
								
								self:close();
								
								Dialogs.confirmYesNo(msg, 
									function(confirmado)
										if confirmado then
											SC3UNDO_Capture(theScene, 
												function()
													for i = 1, #sel, 1 do
														sel[i]:delete();
													end;
												end);
										end;
									end);			
							end;
							
		btnProps.onClick = function ()
							-- Chamar outro popup aqui
							 local frm = GUI.newForm("frmTokenProps");
							 frm:prepareForShow(self.theSelection, theScene);									  
							 self:close();
							 frm:show();
						   end;
							
		btnOpen.onClick = function ()
							-- Get token to open sheet
							local theToken
							if #(self.theSelection) > 0 then
								theToken = theSelection[1];
							end
							if theToken == nil then 
								self:close()
								return
							end

							local mesa = Firecast.getMesaDe(theScene)
							if mesa==nil then return end

							local bibItem = mesa:findBibliotecaItem(theToken.ownerCharacter)
							if bibItem==nil then return end

							GUI.asyncOpenFirecastURI(bibItem.firecastURI, {autoFocus=true, newTab=true})

							self:close()

						   	end;

		btnSave.onClick = function ()
							local dataPromise = Firecast.asyncOpenUserNDB("tokens", {create=true, skipLoad=true});
							dataPromise:thenDo(
								function (node)

									-- Get token to be saved
									local theToken
									if #(self.theSelection) > 0 then
										theToken = theSelection[1];
									end
									if theToken == nil then 
										self:close()
										return
									end

									-- create a new token on the saved token menu
									local savedToken = NDB.createChildNode(node.tokensSalvos, "item")
									if savedToken == nil then 
										self:close()
										return
									end

									-- useful variables
									local size = theScene.grid.cellSize;


									-- fill token data

									-- MAIN
									savedToken.character = theToken.ownerCharacter
									savedToken.name = theToken.name

									savedToken.snapToGrid = theToken.snapToGrid
									savedToken.facingMode = theToken.facingMode

									savedToken.layer = theToken.layer

									savedToken.bar1 = theToken.barValue1
									savedToken.bar1Max = theToken.barMax1
									savedToken.bar1Color = theToken.barColor1
									savedToken.bar2 = theToken.barValue2
									savedToken.bar2Max = theToken.barMax2
									savedToken.bar2Color = theToken.barColor2
									savedToken.bar3 = theToken.barValue3
									savedToken.bar3Max = theToken.barMax3
									savedToken.bar3Color = theToken.barColor3


									savedToken.width = theToken.width / size
									savedToken.height = theToken.height / size
									savedToken.angle = theToken.rotation

									-- AURA

									local opGraficaAura = theToken.canvas:findByName("aura")

									savedToken.cbxPossuiAura = opGraficaAura ~= nil
									if savedToken.cbxPossuiAura then
										savedToken.cmbFormaAura = opGraficaAura.userData.FormaAura
										savedToken.imageAura = opGraficaAura.url
										savedToken.edtRaioAura = opGraficaAura.height
										savedToken.edtAlturaAura = opGraficaAura.height
										savedToken.edtLarguraAura = opGraficaAura.width
										savedToken.cmbCorAura = opGraficaAura.color
									end

									-- IMAGE
									savedToken.image = theToken.image.url

									-- FOG OF WAR
									savedToken.visionIntense = theToken.visionIntenseLightRange
									savedToken.visionWeak = theToken.visionWeakLightRange
									savedToken.visionDark = theToken.visionDarknessRange
									savedToken.visionAngle = theToken.visionAngle
									savedToken.hasSight = theToken.visionHaveVision
									savedToken.lightIntense = theToken.lightIntenseRange
									savedToken.lightWeak = theToken.lightWeakRange
									savedToken.lightAngle = theToken.lightAngle
								end);

								self:close()
							end;

		btnCast.onClick = function ()
							if not theScene.isGM then
								showMessage(lang("scene.inseridor.alert.gm.only"));
								return;
							end;

							-- Pass owner info
							local frm = GUI.newForm("frmMagicTokens");
							local node = {};
							local theToken;
							if #(self.theSelection) > 0 then
								theToken = theSelection[1];
							end;
							if theToken~=nil then
								node.character = theToken.ownerCharacter;
							end
							frm:setNodeObject(node);

							frm:prepareForShow(theScene);
							self:close();
							frm:show();
						end;
		
		
		function self:setActiveMenu(menu)
			currentMenuLayout = menu;
		
			for k, v in pairs(__Menuses) do
				if menu == v then
					v.visible = true;
				else
					v.visible = false;
				end;
			end;
			
			resizeForLayoutSize(menu)
		end;
		
		function self:prepareForShow(selection, scene)
			local firstItem = nil;
			local currentLayer = "tokens";
			theScene = scene;
			
			for k, v in pairs(selection) do
				firstItem = v;
				
				if firstItem ~= nil then
					break;
				end;
			end;
			
			if firstItem ~= nil then
				currentLayer = firstItem.layer;
			end;
		
			itmCamadaTokens:setChecked(false);			
			itmCamadaObjetos:setChecked(false);
			itmCamadaBackground:setChecked(false);
					
			if currentLayer == "tokens" then
				itmCamadaTokens:setChecked(true);
			elseif currentLayer == "objects" then
				itmCamadaObjetos:setChecked(true);
			elseif currentLayer == "background" then
				itmCamadaBackground:setChecked(true);
			end;
		
			self:setActiveMenu(self.flaLayout);		
			theSelection = selection;
			self.theSelection = theSelection;
			
			local estaVisible;
			
			if #theSelection > 0 then
				local umToken = theSelection[1];
				
				local function createInvertBoolOptionCallback(propName)							
					local valorInicial = umToken[propName];
					local xScene = scene;
				
					return function()
								SC3UNDO_Capture(xScene,
									function()
										for i = 1, #theSelection, 1 do 
											theSelection[i][propName] = not valorInicial;
										end;	
									end);
								
								self:close();							
					       end;
				end;		

				local function createInvertImageBoolOptionCallback(propName)							
					local valorInicial = umToken.image[propName];
					local xScene = scene;
				
					return function()
								SC3UNDO_Capture(xScene, 
									function()										
										for i = 1, #theSelection, 1 do 
											theSelection[i].image[propName] = not valorInicial;
										end;
									end);
								
								self:close();							
					       end;
				end;	
				
				actColorBlend.onClick = function()
									local frmSelCor = GUI.newForm("frmSelColor");
									local selecionados = theSelection;
									local xScene = scene;
									
									frmSelCor.onRetorno = 
										function(cor, definido)
											SC3UNDO_Capture(xScene,
												function()												
													for i = 1, #selecionados, 1 do
														local image = selecionados[i].image;

														if image ~= nil then
															if definido then
																selecionados[i].image.colorBlend = cor;
															else
																selecionados[i].image.colorBlend = "#00000000"; 
															end;
														end;
													end;
												end);	
										end;
										
									frmSelCor:prepareForShow(selecionados[1].image.colorBlend, 
															{useAlpha=false, 
															 title=lang("scene.menu.token.selCorTin"),
															 defineTitle=lang("scene.menu.token.selCorTin.defineTitle")});									
									self:close();
									frmSelCor:show();
								end;				
				
				actFiltroGlow.onClick = createCallbackForSetFiltroComCor("glow", lang("scene.menu.token.selCorGlow"), lang("scene.menu.token.selCorGlow.defineTitle"));						
				actFiltroInnerGlow.onClick = createCallbackForSetFiltroComCor("innerGlow", lang("scene.menu.token.selCorInnerGlow"), lang("scene.menu.token.selCorInnerGlow.defineTitle"));
				
				actFrameNone.onClick = createCallbackChangeImagePropValue("frame", "none");
				actFrameBoton.onClick = createCallbackChangeImagePropValue("frame", "boton");				
				
				-- Visibilidade
				estaVisible = umToken.visible;
				actInvisible:setChecked(not estaVisible);				
				actInvisible.onClick = createInvertBoolOptionCallback("visible");

				-- Image Options
				local __coresBlendNulas = {};
				__coresBlendNulas["#00000000"] = true;
				__coresBlendNulas["Null"] = true;
				__coresBlendNulas["None"] = true;
				__coresBlendNulas["Transparent"] = true;
				
				actImgOFlipH:setChecked(umToken.image.flipHorz);
				actImgOFlipV:setChecked(umToken.image.flipVert);
				actImgGrayscale:setChecked(umToken.image.grayscale);
				actColorBlend:setChecked(__coresBlendNulas[umToken.image.colorBlend] == nil);
				
				actImgOFlipH.onClick = createInvertImageBoolOptionCallback("flipHorz");
				actImgOFlipV.onClick = createInvertImageBoolOptionCallback("flipVert");
				actImgGrayscale.onClick = createInvertImageBoolOptionCallback("grayscale");
				
				local oFiltroEx = umToken.image.filterEx;
				actFiltroNone:setChecked(oFiltroEx == "none");
				actFiltroGlow:setChecked(oFiltroEx == "glow");
				actFiltroInnerGlow:setChecked(oFiltroEx == "innerGlow");
				actFiltroBlur:setChecked(oFiltroEx == "blur");
				
				local oFrame = umToken.image.frame;
				actFrameNone:setChecked(oFrame == "none");
				actFrameBoton:setChecked(oFrame == "boton");

				-- Token conditions
				conditionsSlots = {0,0,0,0,0}

				for i=1, numConditions, 1 do
					local mark = "condt" .. i;
					local opGrafica1 = umToken.canvas:findByName(mark);
					
					if opGrafica1~=nil then
						actConditions[i]:setChecked(true);
						if opGrafica1.x == 0 and opGrafica1.y == 0 then
							conditionsSlots[1] = i;
						elseif opGrafica1.x ~= 0 and opGrafica1.y == 0 then
							conditionsSlots[2] = i;
						elseif opGrafica1.x == 0 and opGrafica1.y ~= 0 then
							conditionsSlots[3] = i;
						elseif opGrafica1.x ~= 0 and opGrafica1.y ~= 0 then
							conditionsSlots[4] = i;
						end;						
					else
						actConditions[i]:setChecked(false);
					end;

					actConditions[i].onClick = function()
													local opGrafica = umToken.canvas:findByName(mark);

													if opGrafica == nil then
														-- ADD CONDITION to all selected tokens if first token doesn't have the op
														actConditions[i]:setChecked(true);

														for k=1, #self.theSelection, 1 do
															local iterationUmToken = theSelection[k];
															if iterationUmToken.userData.CondtNum == nil then
																iterationUmToken.userData.CondtNum = 0
																iterationUmToken.userData.CondtList = {}
															end

															local iterationOpGrafica = iterationUmToken.canvas:findByName(mark);

															if iterationOpGrafica == nil then 
																-- ADD CONDITION to this token
																if i ~= 31 then 
																	-- Death token doesn't occupy an slot
																	iterationUmToken.userData.CondtNum = iterationUmToken.userData.CondtNum + 1
																	iterationUmToken.userData.CondtList[iterationUmToken.userData.CondtNum] = mark
																end

																-- CREATE the condition bitmap
																iterationOpGrafica = iterationUmToken.canvas:addBitmap();
	                    										iterationOpGrafica.name = mark;

	                    										-- Getting URL
		                    									if i>= 61 and i <= 65 then
		                    										Dialogs.inputQuery("URL", lang("scene.inseridor.url"), "", 
																					function(url)
																						iterationOpGrafica.url = url
																					end)
		                    									else
		                    										iterationOpGrafica.url = lang("scene.menu.conditions.link" .. i)
		                    									end

		                    									-- if token is rotated ignore it
		                    									iterationOpGrafica.rotMode = "ignoreCanvasRot"

		                    									-- draw condition after drawing token
		                    									iterationOpGrafica.outOfOrderMode = "afterOwnerLayer"

		                    									-- define condition position
		                    									if i == 31 then
		                    										-- dead token occupy the whole token
												            		iterationOpGrafica.x = 0
												            		iterationOpGrafica.y = 0
												            		iterationOpGrafica.width = 1
												            		iterationOpGrafica.height = 1
												            	else
												            		-- [-0.1/0.3/0.7]
												            		iterationOpGrafica.x = ((iterationUmToken.userData.CondtNum-1) % 3)*0.4 - 0.1

												            		-- [1.4,1.8,2.2,...]
												            		iterationOpGrafica.y = math.floor((iterationUmToken.userData.CondtNum-1)/3)*0.4 + 1.4
												            		iterationOpGrafica.width = 0.4
												            		iterationOpGrafica.height = 0.4

												            		-- draw condition only when hovering or selected
												            		iterationOpGrafica.drawingTrigger = {"hover", "selected"}
												            	end
												            	-- render on the 10th upper layer
												            	iterationOpGrafica.z = 10
															else
																-- this token alredy has the condition, skip
															end
											            end;										            
													else 
														-- REMOVE CONDITION to all selected tokens if first token doesn't have the op
														actConditions[i]:setChecked(false);

														for k=1, #self.theSelection, 1 do
															local iterationUmToken = theSelection[k]
															if iterationUmToken.userData.CondtNum == nil then
																iterationUmToken.userData.CondtNum = 0
																iterationUmToken.userData.CondtList = {}
															end

															local iterationOpGrafica = iterationUmToken.canvas:findByName(mark)
															if iterationOpGrafica~= nil then
																iterationOpGrafica:delete()
															end

															-- if token has any condition after this condition move them all

															-- find this condition's position on the list
															local pos = nil
															for l=1, iterationUmToken.userData.CondtNum, 1 do 
																if iterationUmToken.userData.CondtList[l] == mark then 
																	pos = l
																	break 
																end
															end

															if pos ~= nil then 
																-- we found that token position on the list 
																for l=pos, iterationUmToken.userData.CondtNum, 1 do 
																	if l == iterationUmToken.userData.CondtNum then 
																		-- last on the list, just delete 
																		iterationUmToken.userData.CondtList[iterationUmToken.userData.CondtNum] = nil
																		iterationUmToken.userData.CondtNum = iterationUmToken.userData.CondtNum - 1
																	else
																		-- move it one slot down
																		iterationUmToken.userData.CondtList[l] = iterationUmToken.userData.CondtList[l+1]
																		local OpGtoMove = iterationUmToken.canvas:findByName(iterationUmToken.userData.CondtList[l])

																		-- [-0.1/0.3/0.7]
													            		OpGtoMove.x = ((l-1) % 3)*0.4 - 0.1
													            		-- [1.4,1.8,2.2,...]
												            			OpGtoMove.y = math.floor((l-1)/3)*0.4 + 1.4
																	end
																end
																-- move anyone after it
															end
														end

													end;
													
												end;
				end;
			end;
			
		
		end;	
		
		]]>
	</script>	
	
	<event name="onKeyUp">	
		if (event.keyCode == 0x89) or (event.keyCode == 0x1B) then
			setTimeout(
				function()
					self:close();
				end, 1);
			
			event.keyCode = 0;
			event.key = "";
		end;
	</event>	
</popupForm>